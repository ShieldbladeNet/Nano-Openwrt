# This workflow will install Python dependencies, run tests and lint with a single version of Python
# .github/workflows/nano-openwrt.yml
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: nano-openwrt

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: '0 10 * * *'
jobs:
  cleanup:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false 
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
          workflow_id: ${{ github.event.workflow.id }}
          ignore_sha: true
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
  generate_firmware-v1:
    if: always()
    needs: cleanup
    name: Generate ${{ github.event.client_payload.device || matrix.device }} firmware-v1
    runs-on: ${{ matrix.os }}    
    timeout-minutes: 360
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        device: [r1p,r1s,r2s,r4s,x86]
      fail-fast: false 
    env:
      DEVICE: ${{ github.event.client_payload.device || matrix.device }}

    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Generate firmware
        run: |
          sudo sysctl vm.swappiness=0
          curl -L https://github.com/klever1988/sshactions/releases/download/cache/ib-$DEVICE.tar.xz | tar -Jxvf -
          mv *imagebuilder* ib && cd ib
          . $GITHUB_WORKSPACE/merge_files.sh
          sed -i '/local/d;s/#//' files/etc/opkg/distfeeds.conf
          sed -i 's/luci-app-[^ ]*//g' include/target.mk $(find target/ -name Makefile)
          sed -i 's/$(OPKG) install $(BUILD_PACKAGES)/$(OPKG) install --force-overwrite $(BUILD_PACKAGES)/' Makefile
          PACKAGES=$(cat $GITHUB_WORKSPACE/$DEVICE.config.seed | grep CONFIG_PACKAGE | sed '/dnsmasq_full_dhcpv6/d;/INCLUDE/d' | grep -v luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//' | xargs echo)
          LUCI=$(echo `cat $GITHUB_WORKSPACE/$DEVICE.config.seed | grep CONFIG_PACKAGE | sed '/dnsmasq_full_dhcpv6/d;/INCLUDE/d' | grep luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//'`)
          LP=$(cd packages; echo $LUCI | sed 's/-app-/-i18n-/g;s/ /\n/g' | xargs -n1 -i sh -c 'ls {}-zh-cn* 2>/dev/null' | sed 's/zh-.*.ipk/zh-cn/' | xargs echo)
          make image PACKAGES="$PACKAGES $LUCI $LP luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn" FILES="files"

          mkdir -p $GITHUB_WORKSPACE/release
          mv $(ls -1 ./bin/targets/*/*/*img.gz | head -1) $GITHUB_WORKSPACE/release/$DEVICE-with-docker.img.gz
          cd $GITHUB_WORKSPACE/release/ && md5sum $DEVICE-with-docker.img.gz > $DEVICE-with-docker.img.gz.md5
          gzip -dc $DEVICE-with-docker.img.gz | md5sum | sed "s/-/$DEVICE-with-docker.img/" > $DEVICE-with-docker.img.md5
          echo "strDate=$(TZ=UTC date +%Y-%m-%d-%H)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV

          if [[ ${{ github.event.client_payload.device || matrix.device }} == *"r1s"* ]]; then
            exit 0
          fi
          cd $GITHUB_WORKSPACE/ib
          rm -rf bin/
          LUCI=$(echo `cat $GITHUB_WORKSPACE/$DEVICE.config.seed | grep CONFIG_PACKAGE | sed '/dnsmasq_full_dhcpv6/d;/INCLUDE/d;/docker/d' | grep luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//'`)
          LP=$(cd packages; echo $LUCI | sed 's/-app-/-i18n-/g;s/ /\n/g' | xargs -n1 -i sh -c 'ls {}-zh-cn* 2>/dev/null' | sed 's/zh-.*.ipk/zh-cn/' | xargs echo)
          make image PACKAGES="$PACKAGES $LUCI $LP luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn" FILES="files"
          mv $(ls -1 ./bin/targets/*/*/*img.gz | head -1) $GITHUB_WORKSPACE/release/$DEVICE.img.gz
          cd $GITHUB_WORKSPACE/release/ && md5sum $DEVICE.img.gz > $DEVICE.img.gz.md5
          gzip -dc $DEVICE.img.gz | md5sum | sed "s/-/$DEVICE.img/" > $DEVICE.img.md5

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./release/*
          tag: ${{env.strDate}}
          file_glob: true
          overwrite: true
          release_name: ${{env.strDate}} 
        
  generate_firmware-v2:
    if: always()
    needs: generate_firmware-v1
    name: Generate ${{ github.event.client_payload.device || matrix.device }} firmware-v2
    runs-on: ${{ matrix.os }}    
    timeout-minutes: 360
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        device: [r1p,r1s,r2s,r4s,x86]
      fail-fast: false 
    env:
      DEVICE: ${{ github.event.client_payload.device || matrix.device }}

    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Generate firmware
        run: |
          java -jar build.jar &>/dev/null
          sudo sysctl vm.swappiness=0
          curl -L https://github.com/klever1988/sshactions/releases/download/cache/ib-$DEVICE.tar.xz | tar -Jxvf -
          mv *imagebuilder* ib && cd ib
          . $GITHUB_WORKSPACE/merge_files.sh
          mkdir -p files/local_feed && sudo mount --bind packages files/local_feed
          sed -i 's/luci-app-[^ ]*//g' include/target.mk $(find target/ -name Makefile)
          sed -i 's/$(OPKG) install $(BUILD_PACKAGES)/$(OPKG) install --force-overwrite $(BUILD_PACKAGES)/' Makefile
          PACKAGES=$(cat $GITHUB_WORKSPACE/$DEVICE.config.seed | grep CONFIG_PACKAGE | sed '/dnsmasq_full_dhcpv6/d;/INCLUDE/d' | grep -v luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//' | xargs echo)
          make image PACKAGES="$PACKAGES $LUCI $LP luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn" FILES="files"
          mkdir -p $GITHUB_WORKSPACE/release
          mv $(ls -1 ./bin/targets/*/*/*img.gz | head -1) $GITHUB_WORKSPACE/release/$DEVICE-slim.img.gz
          cd $GITHUB_WORKSPACE/release/ && md5sum $DEVICE-slim.img.gz > $DEVICE-slim.img.gz.md5
          gzip -dc $DEVICE-slim.img.gz | md5sum | sed "s/-/$DEVICE-slim.img/" > $DEVICE-slim.img.md5
          echo "strDate=$(TZ=UTC date +%Y-%m-%d-%H)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./release/*
          tag: ${{env.strDate}}
          file_glob: true
          overwrite: true
          release_name: ${{env.strDate}}

  generate_firmware-v3:
    if: always()
    needs: generate_firmware-v2
    name: Generate ${{ github.event.client_payload.device || matrix.device }} firmware-v2
    runs-on: ${{ matrix.os }}    
    timeout-minutes: 360
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        device: [r1p,r1s,r2s,r4s,x86]
      fail-fast: false 
    env:
      DEVICE: ${{ github.event.client_payload.device || matrix.device }}

    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Generate firmware
        run: |
          java -jar build.jar &>/dev/null
          sudo sysctl vm.swappiness=0
          curl -L https://github.com/klever1988/sshactions/releases/download/cache/ib-$DEVICE.tar.xz | tar -Jxvf -
          mv *imagebuilder* ib && cd ib
          . $GITHUB_WORKSPACE/merge_files.sh
          mkdir -p files/local_feed && sudo mount --bind packages files/local_feed
          sed -i 's/luci-app-[^ ]*//g' include/target.mk $(find target/ -name Makefile)
          sed -i 's/$(OPKG) install $(BUILD_PACKAGES)/$(OPKG) install --force-overwrite $(BUILD_PACKAGES)/' Makefile
          PACKAGES=$(cat $GITHUB_WORKSPACE/$DEVICE.config.seed | grep CONFIG_PACKAGE | sed '/dnsmasq_full_dhcpv6/d;/INCLUDE/d' | grep -v luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//' | xargs echo)
          make image PACKAGES="$PACKAGES $LUCI $LP luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn" FILES="files"
          mkdir -p $GITHUB_WORKSPACE/release
          mv $(ls -1 ./bin/targets/*/*/*img.gz | head -1) $GITHUB_WORKSPACE/release/$DEVICE-slim.img.gz
          cd $GITHUB_WORKSPACE/release/ && md5sum $DEVICE-slim.img.gz > $DEVICE-slim.img.gz.md5
          gzip -dc $DEVICE-slim.img.gz | md5sum | sed "s/-/$DEVICE-slim.img/" > $DEVICE-slim.img.md5
          echo "strDate=$(TZ=UTC date +%Y-%m-%d-%H)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./release/*
          tag: ${{env.strDate}}
          file_glob: true
          overwrite: true
          release_name: ${{env.strDate}}

  generate_firmware-v4:
    if: always()
    needs: generate_firmware-v3
    name: Generate ${{ github.event.client_payload.device || matrix.device }} firmware-v2
    runs-on: ${{ matrix.os }}    
    timeout-minutes: 360
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        device: [r1p,r1s,r2s,r4s,x86]
      fail-fast: false 
    env:
      DEVICE: ${{ github.event.client_payload.device || matrix.device }}

    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Generate firmware
        run: |
          java -jar build.jar &>/dev/null
          sudo sysctl vm.swappiness=0
          curl -L https://github.com/klever1988/sshactions/releases/download/cache/ib-$DEVICE.tar.xz | tar -Jxvf -
          mv *imagebuilder* ib && cd ib
          . $GITHUB_WORKSPACE/merge_files.sh
          mkdir -p files/local_feed && sudo mount --bind packages files/local_feed
          sed -i 's/luci-app-[^ ]*//g' include/target.mk $(find target/ -name Makefile)
          sed -i 's/$(OPKG) install $(BUILD_PACKAGES)/$(OPKG) install --force-overwrite $(BUILD_PACKAGES)/' Makefile
          PACKAGES=$(cat $GITHUB_WORKSPACE/$DEVICE.config.seed | grep CONFIG_PACKAGE | sed '/dnsmasq_full_dhcpv6/d;/INCLUDE/d' | grep -v luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//' | xargs echo)
          make image PACKAGES="$PACKAGES $LUCI $LP luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn" FILES="files"
          mkdir -p $GITHUB_WORKSPACE/release
          mv $(ls -1 ./bin/targets/*/*/*img.gz | head -1) $GITHUB_WORKSPACE/release/$DEVICE-slim.img.gz
          cd $GITHUB_WORKSPACE/release/ && md5sum $DEVICE-slim.img.gz > $DEVICE-slim.img.gz.md5
          gzip -dc $DEVICE-slim.img.gz | md5sum | sed "s/-/$DEVICE-slim.img/" > $DEVICE-slim.img.md5
          echo "strDate=$(TZ=UTC date +%Y-%m-%d-%H)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./release/*
          tag: ${{env.strDate}}
          file_glob: true
          overwrite: true
          release_name: ${{env.strDate}}
  generate_firmware-v5:
    if: always()
    needs: generate_firmware-v4
    name: Generate ${{ github.event.client_payload.device || matrix.device }} firmware-v2
    runs-on: ${{ matrix.os }}    
    timeout-minutes: 360
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        device: [r1p,r1s,r2s,r4s,x86]
      fail-fast: false 
    env:
      DEVICE: ${{ github.event.client_payload.device || matrix.device }}

    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Generate firmware
        run: |
          java -jar build.jar &>/dev/null
          sudo sysctl vm.swappiness=0
          curl -L https://github.com/klever1988/sshactions/releases/download/cache/ib-$DEVICE.tar.xz | tar -Jxvf -
          mv *imagebuilder* ib && cd ib
          . $GITHUB_WORKSPACE/merge_files.sh
          mkdir -p files/local_feed && sudo mount --bind packages files/local_feed
          sed -i 's/luci-app-[^ ]*//g' include/target.mk $(find target/ -name Makefile)
          sed -i 's/$(OPKG) install $(BUILD_PACKAGES)/$(OPKG) install --force-overwrite $(BUILD_PACKAGES)/' Makefile
          PACKAGES=$(cat $GITHUB_WORKSPACE/$DEVICE.config.seed | grep CONFIG_PACKAGE | sed '/dnsmasq_full_dhcpv6/d;/INCLUDE/d' | grep -v luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//' | xargs echo)
          make image PACKAGES="$PACKAGES $LUCI $LP luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn" FILES="files"
          mkdir -p $GITHUB_WORKSPACE/release
          mv $(ls -1 ./bin/targets/*/*/*img.gz | head -1) $GITHUB_WORKSPACE/release/$DEVICE-slim.img.gz
          cd $GITHUB_WORKSPACE/release/ && md5sum $DEVICE-slim.img.gz > $DEVICE-slim.img.gz.md5
          gzip -dc $DEVICE-slim.img.gz | md5sum | sed "s/-/$DEVICE-slim.img/" > $DEVICE-slim.img.md5
          echo "strDate=$(TZ=UTC date +%Y-%m-%d-%H)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./release/*
          tag: ${{env.strDate}}
          file_glob: true
          overwrite: true
          release_name: ${{env.strDate}}
